name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest
    name: Lint and Type Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcap-dev portaudio19-dev libasound2-dev python3-dev wget git swig ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run black (code formatting)
      run: |
        black --check --diff .
    
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff .
    
    - name: Run flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run mypy (type checking)
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcap-dev portaudio19-dev libasound2-dev python3-dev wget git swig ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-test-docker:
    runs-on: ubuntu-latest
    name: Build and Test Docker Image
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t sip-ai-agent:test .
    
    - name: Test Docker image
      run: |
        # Test that the container starts without errors
        docker run --rm sip-ai-agent:test python -c "print('Docker image test passed')"
    
    - name: Test configuration validation
      run: |
        # Test configuration validation
        docker run --rm -e SIP_DOMAIN=test.com -e SIP_USER=1001 -e SIP_PASS=test -e OPENAI_API_KEY=sk-test -e AGENT_ID=va-test sip-ai-agent:test python -c "from config import Settings; s = Settings(); print('Configuration validation passed')"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcap-dev portaudio19-dev libasound2-dev python3-dev wget git swig ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/
    
    - name: Run safety check
      run: |
        safety scan --output json > safety-report.json || true
        safety check --output screen

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [lint-and-typecheck, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcap-dev portaudio19-dev libasound2-dev python3-dev wget git swig ffmpeg
    
    - name: Verify PortAudio installation
      run: |
        pkg-config --cflags --libs portaudio-2.0
        ls -la /usr/include/portaudio.h
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Create temporary requirements without pyaudio for integration tests
        grep -v "^pyaudio" requirements.txt > requirements-no-audio.txt
        pip install -r requirements-no-audio.txt
        # Try to install pyaudio, but don't fail if it doesn't work
        pip install pyaudio==0.2.13 || echo "PyAudio installation failed, continuing with tests (using mocks)"
    
    - name: Run integration tests
      run: |
        pytest tests/ -v --tb=short
      env:
        SIP_DOMAIN: test.example.com
        SIP_USER: 1001
        SIP_PASS: testpass
        OPENAI_API_KEY: sk-test-key
        AGENT_ID: va-test123
        DEBUG: true
        METRICS_ENABLED: false
        STRUCTURED_LOGGING: false

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [lint-and-typecheck, test, build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      run: |
        docker build -t ghcr.io/${{ github.repository }}:latest .
        docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .
        docker push ghcr.io/${{ github.repository }}:latest
        docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
    
    - name: Update deployment (example)
      run: |
        echo "Deployment completed for commit ${{ github.sha }}"
        # Add your deployment logic here
